; var declaration data_s
; expr
push 32
; var declaration data
; array allocation
push 8
ss
push 1
sub
indup
mul
alloc
; index 0 expr
dup
push 0
add
tovp
push 0
push 8
write
; var declaration iter
; expr
push 0
; arr index
; offset
push 1
indup
ss
push 1
sub
indup
push 1
sub
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; function declaration
jmp label0
strcmp:
; var declaration i
; expr
push 0
; while loop
; expr
while0:
; offset
push 2
indup
push 1
indup
push 1
mul
add
tovp
push 1
read
; offset
push 2
indup
push 2
indup
push 1
mul
add
tovp
push 1
read
cmpe
; then
zjmp label1
; if statement
; expr
; offset
push 2
indup
push 1
indup
push 1
mul
add
tovp
push 1
read
push ''
cmpe
; then
zjmp label2
; return
push 1
push 3
inswap
pop
pop
pop
ret
; end
pop
label2:
; var reassign
; expr
push 0
indup
push 1
add
push 1
inswap
pop
; end
; end while
jmp while34
label1:
; return
push 0
push 3
inswap
pop
pop
pop
ret
; end
pop
pop
pop
pop
; end func
ret
label0:
; function declaration
jmp label3
print_state:
; var declaration i
; expr
push 0
; write
push_str "|"
push 1
native 1
; while loop
; expr
while1:
push 0
indup
ss
push 1
sub
indup
cmpl
; then
zjmp label4
; if statement
; expr
; offset
push 2
indup
push 1
indup
push 8
mul
add
tovp
push 8
read
push 0
cmpe
; then
zjmp label5
; write
push_str " "
push 1
native 1
; else statement
jmp label6
label5:
; write
push_str "*"
push 1
native 1
; end
label6:
; var reassign
; expr
push 0
indup
push 1
add
push 1
inswap
pop
; end
; end while
jmp while107
label4:
; write
push_str "|
"
push 1
native 1
; end
pop
; end func
ret
label3:
; function declaration
jmp label7
gen_next:
; var declaration new
; expr
ss
push 1
sub
indup
push 8
mul
alloc
; var declaration new_s
; expr
push 0
; var declaration i
; expr
push 0
; while loop
; expr
while2:
push 0
indup
ss
push 1
sub
indup
cmpl
; then
zjmp label8
; var declaration prev_in
; expr
push 0
indup
push 1
sub
ss
push 1
sub
indup
add
ss
push 1
sub
indup
mod
; var declaration cur_in
; expr
push 1
indup
push 0
add
ss
push 1
sub
indup
add
ss
push 1
sub
indup
mod
; var declaration next_in
; expr
push 2
indup
push 1
add
ss
push 1
sub
indup
add
ss
push 1
sub
indup
mod
; var declaration cur
; expr
push 4
alloc
; arr index
; offset
push 0
indup
push 0
push 1
mul
add
tovp
; expr
; offset
push 9
indup
push 5
indup
push 8
mul
add
tovp
push 8
read
push '0'
add
; size
push 1
write
; arr index
; offset
push 0
indup
push 1
push 1
mul
add
tovp
; expr
; offset
push 9
indup
push 4
indup
push 8
mul
add
tovp
push 8
read
push '0'
add
; size
push 1
write
; arr index
; offset
push 0
indup
push 2
push 1
mul
add
tovp
; expr
; offset
push 9
indup
push 3
indup
push 8
mul
add
tovp
push 8
read
push '0'
add
; size
push 1
write
; if statement
; expr
push_str "111"
push 1
indup
call strcmp
; then
zjmp label9
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 0
; size
push 8
write
; end
label9:
; if statement
; expr
push_str "110"
push 1
indup
call strcmp
; then
zjmp label10
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; end
label10:
; if statement
; expr
push_str "101"
push 1
indup
call strcmp
; then
zjmp label11
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; end
label11:
; if statement
; expr
push_str "100"
push 1
indup
call strcmp
; then
zjmp label12
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 0
; size
push 8
write
; end
label12:
; if statement
; expr
push_str "011"
push 1
indup
call strcmp
; then
zjmp label13
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; end
label13:
; if statement
; expr
push_str "010"
push 1
indup
call strcmp
; then
zjmp label14
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; end
label14:
; if statement
; expr
push_str "001"
push 1
indup
call strcmp
; then
zjmp label15
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 1
; size
push 8
write
; end
label15:
; if statement
; expr
push_str "000"
push 1
indup
call strcmp
; then
zjmp label16
; arr index
; offset
push 6
indup
push 6
indup
push 8
mul
add
tovp
; expr
push 0
; size
push 8
write
; end
label16:
; var reassign
; expr
push 4
indup
push 1
add
push 5
inswap
pop
; var reassign
; expr
push 5
indup
push 1
add
push 6
inswap
pop
; end
pop
pop
pop
pop
; end while
jmp while164
label8:
ss
push 2
sub
indup
dealloc
; var reassign
; expr
push 2
indup
ss
push 2
sub
inswap
pop
; end
pop
pop
pop
; end func
ret
label7:
; while loop
; expr
while3:
ss
push 3
sub
indup
ss
push 1
sub
indup
cmpl
; then
zjmp label17
call print_state
call gen_next
; var reassign
; expr
ss
push 3
sub
indup
push 1
add
ss
push 3
sub
inswap
pop
; end
; end while
jmp while453
label17:
